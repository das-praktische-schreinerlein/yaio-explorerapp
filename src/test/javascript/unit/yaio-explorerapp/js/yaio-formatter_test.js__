/** 
 * software for projectmanagement and documentation
 * 
 * @FeatureDomain                Collaboration 
 * @author                       Michael Schreiner <michael.schreiner@your-it-fellow.de>
 * @category                     collaboration
 * @copyright                    Copyright (c) 2014, Michael Schreiner
 * @license                      http://mozilla.org/MPL/2.0/ Mozilla Public License 2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

// 'use strict'; fails in IE because of findandreplacedomtext

/** 
 * tests for yaio-formatter.js checks formatter
 *  
 * @FeatureDomain                Test
 * @author                       Michael Schreiner <michael.schreiner@your-it-fellow.de>
 * @category                     collaboration
 * @copyright                    Copyright (c) 2014, Michael Schreiner
 * @license                      http://mozilla.org/MPL/2.0/ Mozilla Public License 2.0
 */

(function () {
    var testObj = yaioAppBase.get('YaioFormatter');
    
    describe('Modul yaio-formatter Service-Funktions (Formatter formatMarkdown)', function doSuiteFormatMarkdown() {
        beforeEach(function (done) {
            // load async
            setTimeout(function () {
                // load fixture
                loadFixtures("yaio-formatter_markdown.html");
                
                // call done
                done();
            }, 1000);
            
            // set _localHtmlId
            testObj._localHtmlId = 1;
        });
    
        afterEach(function () {
        });

        it( "should format Markdown as html (formatMarkdown)", function doTestFormatMarkdown() {
            // Given
            var src = $("#markdown_src").val();
            var expected = $("#markdown_expected").html().trim();
            
            // When
            var res = testObj.formatMarkdown(src, false).trim();
            // should be regenerated to get browser-specific attr-order
            var reGeneratedRes = $("<div>" + res + "</div>").html(); 
            
            // Then
            expect(reGeneratedRes).toBe(expected);
        });
    });

    describe('Modul yaio-formatter Service-Funktions (extract ganttMarkdown)', function doSuiteExtractGanttMarkdown() {
        beforeEach(function (done) {
            // load async
            setTimeout(function () {
                // load fixture
                loadFixtures("yaio-formatter_extractganttmarkdown.html");
                
                // call done
                done();
            }, 1000);
            
            // set _localHtmlId
            testObj._localHtmlId = 1;
        });

        it( "should extract ganttMarkdown from fancytree-table (convertExplorerLinesAsGanttMarkdown)", function doTestConvertExplorerLinesAsCheckList() {
            // Given
            var expected = $("#extractganttmarkdown_expected").html().trim();
            
            // When
            var res = testObj.convertExplorerLinesAsGanttMarkdown().trim();
            
            // generalize
            res = res.replace(/\(Stand: .*?\)/g, "(Stand: XXX)");
            expected = expected.replace(/\(Stand: .*?\)/g, "(Stand: XXX)");
            
            // Then
            expect(res).toBe(expected);
        });
    });

    describe('Modul yaio-formatter Service-Funktions (convertMarkdownToJira)', function doSuiteConvertMarkdownToJira() {
        beforeEach(function (done) {
            // load async
            setTimeout(function () {
                // load fixture
                loadFixtures("yaio-formatter_markdown.html");
                
                // call done
                done();
            }, 1000);
            
            // set _localHtmlId
            testObj._localHtmlId = 1;
        });

        it( "should convert markdown to jira (convertMarkdownToJira)", function doTestConvertMarkdownToJira() {
            // Given
            var src = $("#markdown2jira_src").val().trim();
            var expected = $("#markdown2jira_expected").val().trim();
            
            // When
            var res = testObj.convertMarkdownToJira(src).trim();
            
            // Then
            expect(res).toBe(expected);
        });
    });

    describe('Modul yaio-formatter Service-Funktions (TextPrepare)', function doSuiteTextPrepare() {
        beforeEach(function (done) {
            // load async
            setTimeout(function () {
                // load fixture
                loadFixtures("yaio-formatter_markdown.html");
                
                // call done
                done();
            }, 1000);
            
            // set _localHtmlId
            testObj._localHtmlId = 1;
        });

        it( "should pepare markdown by replacing html-tags outside code and mask empty lines (prepareTextForMarkdown)", function doTestPrepareTextForMarkdown() {
            // Given
            var src = $("#markdownPrepare_src").val().trim();
            var expected = $("#markdownPrepare_expected").html().trim();
            
            // When
            var res = testObj.prepareTextForMarkdown(src).trim();
            var reGeneratedRes = $("<div>" + res.trim() + "</div>").html(); 
            var reGeneratedExpected = $("<div>" + expected.trim() + "</div>").html(); 
            
            // Then
            expect(reGeneratedRes).toBe(reGeneratedExpected);
        });
    });
    

    describe('Modul yaio-formatter Service-Funktions (TOC)', function doSuiteTOC() {
        beforeEach(function (done) {
            // load async
            setTimeout(function () {
                // load fixture
                loadFixtures("yaio-formatter_markdown.html");
                
                // call done
                done();
            }, 1000);
            
            // set _localHtmlId
            testObj._localHtmlId = 1;
        });

        it( "should render TOC and show it if minDeep reached (addTOCForBlock)", function doTestAddTOCForBlockFull() {
            // Given
            var expected = $("#addTOCForBlockFilled_expected").html().trim();
            var expectedDisplay = "block";
            
            // When
            testObj.addTOCForBlock("#addTOCForBlockFilled", "#addTOCForBlock_src", { toc: { hide: false, minDeep: 2}});
            var res = $("#addTOCForBlockFilled").html();
            var display = $("#addTOCForBlockFilled").css("display");
            
            // extract common html
            var reGeneratedRes = $("<div>" + res.trim() + "</div>").html(); 
            var reGeneratedExpected = $("<div>" + expected.trim() + "</div>").html(); 
            reGeneratedExpected = reGeneratedExpected.replace(/href="" /g, '');
            reGeneratedRes = reGeneratedRes.replace(/href="" /g, '');
            
            // Then
            expect(display).toBe(expectedDisplay);
            expect(reGeneratedRes).toBe(reGeneratedExpected);
        });

        it( "should not show TOC if minDeep not reached (addTOCForBlock)", function doTestAddTOCForBlockEmpty() {
            // Given
            var expectedDisplay = "none";
            
            // When
            testObj.addTOCForBlock("#addTOCForBlockEmpty", "#addTOCForBlock_src", { toc: { hide: false, minDeep: 6}});
            var display = $("#addTOCForBlockEmpty").css("display");
            
            // Then
            expect(display).toBe(expectedDisplay);
        });
    });

})();
